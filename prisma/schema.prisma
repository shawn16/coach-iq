// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model (for coaches)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique // Email can be null initially for some flows
  emailVerified DateTime? // When email was verified
  image         String? // Profile image URL
  passwordHash  String? // For Credentials provider
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[] // Relation to OAuth accounts
  sessions      Session[] // Relation to user sessions
  athletes      Athlete[] // Relation to athletes managed by this coach
}

// NextAuth Models

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Athlete model
model Athlete {
  id             Int             @id @default(autoincrement())
  firstName      String
  lastName       String
  birthday       DateTime        @db.Date
  grade          Int
  time1600m      Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  coachId        String // Foreign key to User (Coach)
  coach          User            @relation(fields: [coachId], references: [id], onDelete: Cascade)
  workoutResults WorkoutResult[] // Relation to workout results
}

// Training Plan model (Simplified for now)
model TrainingPlan {
  id          String    @id @default(cuid())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Workout Result model (Simplified for now)
model WorkoutResult {
  id        String   @id @default(cuid())
  athleteId Int
  athlete   Athlete  @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  date      DateTime
  type      String // e.g., "Interval", "Tempo", "Long Run"
  details   Json // Flexible field for workout-specific data (distance, reps, pace, etc.)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
