// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model (for coaches)
model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique // Email can be null initially for some flows
  emailVerified DateTime? // When email was verified
  image         String? // Profile image URL
  passwordHash  String? // For Credentials provider
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[] // Relation to OAuth accounts
  sessions      Session[] // Relation to user sessions
  athletes      Athlete[] // Relation to athletes managed by this coach
  trainingPlans TrainingPlan[] // Relation to training plans created by this coach
}

// NextAuth Models

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Athlete model
model Athlete {
  id                  Int                   @id @default(autoincrement())
  firstName           String
  lastName            String
  birthday            DateTime              @db.Date
  grade               Int
  time1600m           Int
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  coachId             String // Foreign key to User (Coach)
  coach               User                  @relation(fields: [coachId], references: [id], onDelete: Cascade)
  workoutResults      WorkoutResult[] // Relation to workout results
  trainingPlanAthletes TrainingPlanAthlete[] // Relation to training plans
}

// Enhanced Training Plan model
model TrainingPlan {
  id              String                @id @default(cuid())
  title           String
  description     String?               @db.Text
  duration        String                // e.g. "12 weeks" - display format
  durationWeeks   Int                   // numeric value for calculations
  startDate       DateTime
  endDate         DateTime
  progress        Int?                  // percentage completed (0-100)
  type            String?               // "endurance", "speed", "strength", "marathon", "standard"
  planType        String?               // additional classification e.g. "xc" for cross country
  totalWorkouts   Int?                  // count of all workouts in the plan
  isCompleted     Boolean               @default(false)
  
  // Relations
  userId          String                // coach who created the plan
  user            User                  @relation(fields: [userId], references: [id])
  weeks           PlanWeek[]            // weeks of the training plan
  athletes        TrainingPlanAthlete[] // athletes assigned to this plan
  
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  
  @@index([userId])
}

// Many-to-many relationship between Training Plans and Athletes
model TrainingPlanAthlete {
  trainingPlan    TrainingPlan          @relation(fields: [trainingPlanId], references: [id], onDelete: Cascade)
  trainingPlanId  String
  athlete         Athlete               @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  athleteId       Int
  assignedAt      DateTime              @default(now())

  @@id([trainingPlanId, athleteId])
  @@index([athleteId])
  @@index([trainingPlanId])
}

// Weekly plan data
model PlanWeek {
  id              String                @id @default(cuid())
  weekNumber      Int
  dateRange       String                // e.g. "5/24-5/30"
  seasonPhase     String?               // e.g. "Summer Week 1"
  
  // Relations
  trainingPlan    TrainingPlan          @relation(fields: [trainingPlanId], references: [id], onDelete: Cascade)
  trainingPlanId  String
  workouts        PlanWorkout[]

  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  
  @@index([trainingPlanId])
  @@unique([trainingPlanId, weekNumber])
}

// Workout types
model WorkoutType {
  id              String                @id @default(cuid())
  name            String
  color           String                // CSS classes for styling
  workouts        PlanWorkout[]
  
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  
  @@unique([name])
}

// Workout for a specific week and type
model PlanWorkout {
  id              String                @id @default(cuid())
  details         String?               @db.Text // workout description e.g. "10m@80%"
  
  // Relations
  week            PlanWeek              @relation(fields: [weekId], references: [id], onDelete: Cascade)
  weekId          String
  workoutType     WorkoutType           @relation(fields: [workoutTypeId], references: [id])
  workoutTypeId   String
  
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  
  @@index([weekId])
  @@index([workoutTypeId])
  @@unique([weekId, workoutTypeId]) // Each week can only have one workout of a specific type
}

// Workout Result model (Simplified for now)
model WorkoutResult {
  id        String   @id @default(cuid())
  athleteId Int
  athlete   Athlete  @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  date      DateTime
  type      String // e.g., "Interval", "Tempo", "Long Run"
  details   Json // Flexible field for workout-specific data (distance, reps, pace, etc.)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
